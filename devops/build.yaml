pool:
  name: Azure-VMSS-Debian-Bookworm
variables:
  - name: CONTAINERIZED_AGENT_POOL
    value: QryptHostContainerizedAgentPool
  - name: START_TARGET_JOB_NAME
    value: "Start_Target_Container"
  - name: STOP_TARGET_JOB_NAME
    value: "Stop_Target_Container"
  - name: TARGET_AGENT_NAME
    value: $(Build.DefinitionName)_$(Build.BuildId)
resources:
  repositories:
    - repository: templates
      type: git
      name: Qrypt/BuildTemplates
      ref: refs/tags/ADP-1.0
jobs:
# -------------------------------------------  
- template: jobs/start_distro_build_container.yml@templates
  parameters:
    TargetJobName: ${{ variables.START_TARGET_JOB_NAME }}_Ubuntu
    TargetAgentName: ${{ variables.TARGET_AGENT_NAME }}_Ubuntu
    HostPoolName: Azure-VMSS-Debian-Bookworm
    DockerBuildTag: 0.2.124
# -------------------------------------------
- template: jobs/stop_distro_build_container.yml@templates
  parameters:
    TargetJobName: ${{ variables.STOP_TARGET_JOB_NAME }}_Ubuntu
    TargetAgentName: ${{ variables.TARGET_AGENT_NAME }}_Ubuntu
    HostPoolName: Azure-VMSS-Debian-Bookworm
    DockerBuildTag: 0.2.124
    DependsOn: 
    - Ubuntu_Build
# -------------------------------------------
- job: Ubuntu_Build
  dependsOn: ${{ variables.START_TARGET_JOB_NAME }}_Ubuntu
  pool:
    name: ${{ variables.CONTAINERIZED_AGENT_POOL }}
    demands: Agent.Name -equals ${{ variables.TARGET_AGENT_NAME }}_Ubuntu
  displayName: 'Build for Ubuntu Linux'
  timeoutInMinutes: 720
  steps:
    # Install Dependencies
    - script: |
        apt update
        apt install autoconf -y
      displayName: Install system dependencies

    - script: |
        conan profile new --detect --force default
        conan profile update settings.compiler.cppstd=17 default
        conan profile update settings.compiler.libcxx=libstdc++11 default
        conan profile update settings.compiler.version=9 default
        conan install QryptSDKWrapper/c-wrapper-builds@Qrypt/dev -o python_sdk=False -if prefix
        rm prefix/*.txt
        cp -r prefix/* /usr/
      workingDirectory: $(Build.SourcesDirectory)/deps
      displayName: Install QryptSecurityC
    # Set up privsep user for install
    - script: |
        useradd -r sshd
        usermod -d /var/sshd sshd
      displayName: Set up privsep user
    # Configure and build
    - script: |
        autoreconf --install --force
      displayName: Generate configure script
    - script: ./configure --prefix=$(Build.ArtifactStagingDirectory)
      displayName: Configure
    - script: make
      displayName: Make
    # Upload artifacts
    - script: make install
      displayName: Stage artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'OpenSSH'